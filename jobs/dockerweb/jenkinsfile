pipeline {
    agent any

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ PAR√ÅMETROS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    parameters {
        string(name: 'NAME_CONTAINER', defaultValue: 'proyecto-qa',
               description: 'Prefijo / nombre fijo del contenedor')
        string(name: 'IMAGE_NAME',     defaultValue: 'iproyecto-qa',
               description: 'Nombre base de la imagen')
        string(name: 'IMAGE_TAG',      defaultValue: 'latest',
               description: 'Tag de la imagen')
        string(name: 'PORT',           defaultValue: '81',
               description: 'Puerto host ‚Üí 80 contenedor')
        booleanParam(name: 'REBUILD_IMAGE', defaultValue: true,
               description: 'Forzar rebuild de la imagen (true/false)')
    }

    /* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ VARIABLES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
    environment {
        FULL_IMAGE = "${params.IMAGE_NAME}:${params.IMAGE_TAG}"
    }

    stages {

        /* ‚îÄ‚îÄ 0. Purga de contenedores obsoletos ‚îÄ‚îÄ */
        stage('Purge old containers') {
            steps {
                sh '''
                  echo "üîÑ  Buscando contenedores que empiecen con ${NAME_CONTAINER}‚Ä¶"
                  OLD=$(docker ps -a --format '{{.ID}} {{.Names}}' | awk '$2 ~ /^'"${NAME_CONTAINER}"'/ {print $1}')
                  if [ -n "$OLD" ]; then
                      echo "Encontrados contenedores antiguos: $OLD ‚Äî elimin√°ndolos..."
                      docker rm -f $OLD || true
                  else
                      echo "No hay contenedores antiguos que purgar."
                  fi
                '''
            }
        }

        /* ‚îÄ‚îÄ 1. Estado del contenedor ‚îÄ‚îÄ */
        stage('Check container status') {
            steps {
                script {
                    env.CT_STATUS = sh(
                        script: '''
                          if docker ps --format '{{.Names}}' | grep -q -w "^${NAME_CONTAINER}$"; then
                              echo running
                          elif docker ps -a --format '{{.Names}}' | grep -q -w "^${NAME_CONTAINER}$"; then
                              echo exited
                          else
                              echo none
                          fi
                        ''',
                        returnStdout: true
                    ).trim()
                    echo "üìÑ  Estado del contenedor: ${env.CT_STATUS}"
                }
            }
        }

        /* ‚îÄ‚îÄ 2. Build imagen si hace falta ‚îÄ‚îÄ */
        stage('Build image (if needed)') {
            when {
                anyOf {
                    expression { params.REBUILD_IMAGE }
                    expression { env.CT_STATUS == 'none' }
                }
            }
            steps {
                echo "üèóÔ∏è  Construyendo imagen ${env.FULL_IMAGE}‚Ä¶"
                sh "docker build jobs/dockerweb/ -t ${env.FULL_IMAGE}"
            }
        }

        /* ‚îÄ‚îÄ 3. Verificar / liberar puerto ‚îÄ‚îÄ */
        stage('Ensure free port') {
            steps {
                sh """
                  echo "üîé  Verificando si el puerto ${params.PORT} est√° ocupado‚Ä¶"
                  PORT_USED=\$(docker ps --format '{{.ID}} {{.Ports}}' | grep '0.0.0.0:${params.PORT}->' | awk '{print \$1}')
                  if [ -n "\$PORT_USED" ]; then
                      echo "‚ö†Ô∏è  Puerto ${params.PORT} ocupado por contenedor \$PORT_USED ‚Äî liber√°ndolo."
                      docker stop \$PORT_USED || true
                      docker rm   \$PORT_USED || true
                  else
                      echo "‚úÖ  Puerto ${params.PORT} libre."
                  fi
                """
            }
        }

        /* ‚îÄ‚îÄ 4. Arrancar o crear contenedor ‚îÄ‚îÄ */
        stage('Start or Run container') {
            steps {
                script {
                    if (env.CT_STATUS == 'running') {
                        echo "‚úîÔ∏è  Contenedor ya en ejecuci√≥n ‚Äî no se realiza ninguna acci√≥n."
                    } else if (env.CT_STATUS == 'exited') {
                        echo "‚ö° Contenedor detenido ‚Äî arranc√°ndolo‚Ä¶"
                        sh "docker start ${params.NAME_CONTAINER}"
                    } else {
                        echo "‚ûï Creando y ejecutando contenedor nuevo‚Ä¶"
                        sh "docker run -dp ${params.PORT}:80 --name ${params.NAME_CONTAINER} ${env.FULL_IMAGE}"
                    }
                }
            }
        }
    }
}


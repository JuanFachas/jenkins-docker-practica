pipeline {
    agent any

    parameters {
        string(name: 'name_container', defaultValue: 'proyecto-qa',  description: 'nombre del docker')
        string(name: 'name_imagen',    defaultValue: 'iproyecto-qa', description: 'nombre de la imagen')
        string(name: 'tag_imagen',     defaultValue: 'latest',       description: 'etiqueta de la imagen')
        string(name: 'puerto_imagen',  defaultValue: '81',           description: 'puerto a publicar')
    }

    environment {
        NAME_FINAL = "${params.name_container}-${params.tag_imagen}-${params.puerto_imagen}"
        IMAGE_TAG  = "${params.name_imagen}:${params.tag_imagen}"
    }

    stages {

        stage('stop/rm') {
            steps {
                sh '''
                  #!/bin/bash
                  set +e
                  if docker ps -a --format '{{.Names}}' | grep -w "^${NAME_FINAL}$" >/dev/null; then
                      echo "Contenedor ${NAME_FINAL} encontrado. Deteniendo y eliminando..."
                      docker stop ${NAME_FINAL} || true
                      docker rm   ${NAME_FINAL} || true
                  else
                      echo "No existe contenedor ${NAME_FINAL}"
                  fi
                '''
            }
        }

        stage('build image') {
            steps {
                sh "docker build jobs/dockerweb/ -t ${IMAGE_TAG}"
            }
        }

        stage('run container') {
            steps {
                sh "docker run -dp ${params.puerto_imagen}:80 --name ${NAME_FINAL} ${IMAGE_TAG}"
            }
        }
    }
}

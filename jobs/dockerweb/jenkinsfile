pipeline {
    agent any

    parameters {
        string(name: 'NAME_CONTAINER', defaultValue: 'proyecto-qa',  description: 'Nombre fijo del contenedor')
        string(name: 'IMAGE_NAME',     defaultValue: 'iproyecto-qa', description: 'Nombre de la imagen')
        string(name: 'IMAGE_TAG',      defaultValue: 'latest',       description: 'Tag de la imagen')
        string(name: 'PORT',           defaultValue: '81',           description: 'Puerto host → 80 contenedor')
        booleanParam(name: 'REBUILD_IMAGE', defaultValue: true, description: 'Forzar rebuild de la imagen')
    }

    environment {
        FULL_IMAGE = "${params.IMAGE_NAME}:${params.IMAGE_TAG}"
    }

    stages {

        stage('Check container status') {
            steps {
                script {
                    // status = running | exited | none
                    env.CT_STATUS = sh(
                        script: '''
                          if docker ps --format '{{.Names}}' | grep -w "^${NAME_CONTAINER}$" ; then
                              echo running
                          elif docker ps -a --format '{{.Names}}' | grep -w "^${NAME_CONTAINER}$" ; then
                              echo exited
                          else
                              echo none
                          fi
                        ''',
                        returnStdout: true
                    ).trim()
                    echo "Estado del contenedor: ${env.CT_STATUS}"
                }
            }
        }

        stage('Build image (if needed)') {
            when {
                anyOf {
                    expression { params.REBUILD_IMAGE }
                    expression { env.CT_STATUS == 'none' }
                }
            }
            steps {
                sh "docker build jobs/dockerweb/ -t ${env.FULL_IMAGE}"
            }
        }

        stage('Start or Run container') {
            steps {
                script {
                    if (env.CT_STATUS == 'running') {
                        echo "Contenedor ya en ejecución — nada que hacer."
                    } else if (env.CT_STATUS == 'exited') {
                        echo "Contenedor existente pero detenido — arrancándolo…"
                        sh "docker start ${params.NAME_CONTAINER}"
                    } else {
                        echo "Contenedor no existe — creándolo…"
                        sh "docker run -dp ${params.PORT}:80 --name ${params.NAME_CONTAINER} ${env.FULL_IMAGE}"
                    }
                }
            }
        }
    }
}
